# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-06-30T19:34:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class DeleteAssetsIdResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class DeleteUsersSubscriptionResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class GetAdminAnalyticsErrorResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    errors: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of errors (each error has user, app, version, topic, description, additional, and created).',
        title='Errors',
    )


class GetAdminAnalyticsEventResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    events: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of events (each event has user, app, version, topic, description, additional, and created).',
        title='Events',
    )


class GetAdminAnalyticsFeedbackResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    feedbacks: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of feedbacks (each feedback has user, app, version, topic, description, additional, and created).',
        title='Feedbacks',
    )


class GetAdminAnalyticsVoteResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    votes: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of votes (each vote has user, app, version, topic, voting, additional, and created).',
        title='Votes',
    )


class GetAdminAssetsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: Optional[List[str]] = Field(
        [], description='List of assets (ids as strings).', title='Assets'
    )


class GetAdminStatusResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    domains: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of domains (each domain has status [operational, outage], group, name, created and updated).',
        title='Domains',
    )
    queues: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of queues (each queue has name, vhost, consumers, created and updated).',
        title='Queues',
    )


class GetAdminUsersNewsletterResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    emails: Optional[List[str]] = Field(
        [], description='List of newsletter emails.', title='Emails'
    )
    jobs: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of newsletter jobs (each newsletter has subject, body, created, count_sent, and count_remaining).',
        title='Jobs',
    )


class GetAdminUsersResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    users: Optional[List[Dict[str, Any]]] = Field(
        None, description='List of users.', title='Users'
    )


class GetAnalyticsSurveysByIdResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    survey: Dict[str, Any] = Field(
        ...,
        description='Information about the availability of the survey for the user and about the specific survey itself (i.e., title, info title, info message, items).',
        title='Survey',
    )


class GetAnalyticsSurveysResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    surveys: Dict[str, Any] = Field(
        ...,
        description='The available and answered surveys for the specific user (as array of _id).',
        title='Surveys',
    )


class GetAnalyticsVoteResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    voting: bool = Field(
        ...,
        description='Vote for the combination of query parameter (i.e., app, version, topic).',
        title='Voting',
    )


class GetAppsNameAdditionalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class GetAssetsIdAdditionalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class GetAssetsIdFilesKeyResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    files: Optional[Dict[str, Any]] = Field(
        None,
        description="Files in key-value format, e.g., 'fileKey': {'data': '...', 'details': ...}",
        title='Files',
    )


class GetAssetsIdFilesKeyStatusResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    status: str = Field(
        ...,
        description="Status of the file (i.e., 'ready', 'error', 'pending')",
        title='Status',
    )
    details: Optional[str] = Field(
        None, description='Details about the file status', title='Details'
    )


class GetAssetsIdFilesResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    files: Optional[Dict[str, Any]] = Field(
        None,
        description="Files in key-value format, e.g., 'fileKey': {'data': '...', 'details': ...}",
        title='Files',
    )


class GetAssetsIdResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class GetAssetsIdThumbnailResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    thumbnail: str = Field(
        ..., description='Base64 encoded thumbnail of the asset', title='Thumbnail'
    )


class GetAssetsIdThumbnailStatusResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    status: str = Field(
        ...,
        description="Status of the file (i.e., 'ready', 'error', 'pending')",
        title='Status',
    )
    details: Optional[str] = Field(
        None, description='Details about the file status', title='Details'
    )


class GetAssetsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class GetAssetsSharedResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class GetModelsIdKeyCoordsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    coords: str = Field(..., title='Coords')


class Vhost(Enum):
    prod = 'prod'
    test = 'test'


class Status(Enum):
    operational = 'operational'
    degraded = 'degraded'
    outage = 'outage'
    maintenance = 'maintenance'


class GetPublicStatusResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    vhost: Vhost = Field(..., description='Virtual host of the service.', title='Vhost')
    status: Status = Field(..., description='Status of the service.', title='Status')


class GetUsersAdditionalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class GetUsersDesignResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    design: Dict[str, Any] = Field(
        ...,
        description='Design mode (i.e., dark or light) and theme number (i.e., 0 - 3)',
        title='Design',
    )


class GetUsersNewsletterResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    subscribed: bool = Field(
        ...,
        description='Indicates whether the user is subscribed to the newsletter',
        title='Subscribed',
    )


class GetUsersStatisticsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    statistics: Dict[str, Any] = Field(
        ...,
        description="Statistics about the user's activity (i.e., count of images, sketches, previews, models)",
        title='Statistics',
    )
    register_date: datetime = Field(
        ...,
        description='Date of user registration (i.e., 2023-10-09T12:34:56.789Z)',
        title='Register Date',
    )


class GetUsersSubscriptionResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    tier: Optional[str] = Field(
        None,
        description='The subscription tier of the user (e.g., free, pro, essential, etc.).',
        title='Tier',
    )
    quota: Optional[int] = Field(
        None, description='The remaining quota for model generations.', title='Quota'
    )
    expires: Optional[datetime] = Field(
        None, description='The expiration date of the subscription.', title='Expires'
    )
    history: Optional[Dict[str, Any]] = Field(
        None, description='The payment history of the user.', title='History'
    )


class Shared(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class PostAdminAssetsRequest(BaseModel):
    id: str = Field(..., description='ID of the asset.', title='Id')
    shared: Optional[Shared] = Field(
        0,
        description='Indicates whether the asset is not shared (0) or shared (privately via link: 1, publicly: 2)',
        title='Shared',
    )


class PostAdminAssetsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostAdminUsersNewsletterRequest(BaseModel):
    subject: str = Field(..., description='Subject of the newsletter.', title='Subject')
    body: str = Field(..., description='Body of the newsletter.', title='Body')


class PostAdminUsersNewsletterResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class Permission(Enum):
    library = 'library'
    sketch = 'sketch'
    sketch__ = 'sketch++'
    model = 'model'
    box = 'box'
    mesh = 'mesh'
    texture = 'texture'


class PostAdminUsersRequest(BaseModel):
    email: str = Field(..., description='Email address of the user', title='Email')
    group: Optional[str] = Field(None, description='Group of the user.', title='Group')
    permissions: Optional[List[Permission]] = Field(
        [], description='Permissions of the user.', title='Permissions'
    )
    admin: Optional[bool] = Field(
        False, description='Is the user an admin.', title='Admin'
    )


class PostAdminUsersResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostAnalyticsErrorRequest(BaseModel):
    client: Optional[str] = Field(
        None,
        description="Name of the client used (e.g., 'homepage', 'appsuite', 'authentication')",
        title='Client',
    )
    version: str = Field(..., description='Version of the app.', title='Version')
    topic: str = Field(..., description='Topic of the error.', title='Topic')
    description: str = Field(
        ..., description='Description of the error.', title='Description'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostAnalyticsErrorResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostAnalyticsEventRequest(BaseModel):
    client: Optional[str] = Field(
        None,
        description="Name of the client used (e.g., 'homepage', 'appsuite', 'authentication')",
        title='Client',
    )
    version: str = Field(..., description='Version of the app.', title='Version')
    topic: str = Field(..., description='Topic of the event.', title='Topic')
    description: str = Field(
        ..., description='Description of the event.', title='Description'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostAnalyticsEventResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostAnalyticsFeedbackRequest(BaseModel):
    client: Optional[str] = Field(
        None,
        description="Name of the client used (e.g., 'homepage', 'appsuite', 'authentication')",
        title='Client',
    )
    version: str = Field(..., description='Version of the app.', title='Version')
    topic: Optional[str] = Field(
        'general', description='Topic of the feedback.', title='Topic'
    )
    description: str = Field(
        ..., description='Description of the feedback.', title='Description'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostAnalyticsFeedbackResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostAnalyticsSurveysRequest(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    answers: List = Field(
        ...,
        description="The array of answers to the items of the server, can hold different data types (e.g., ['Website', 0, True, [1, 2, 3]])",
        title='Answers',
    )


class PostAnalyticsSurveysResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostAssetsIdCloneRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    file_keys: Optional[List[str]] = Field(
        None, description='Array of file keys to be cloned', title='File Keys'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostAssetsIdCloneResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostAssetsIdFilesKeyConvertRequest(BaseModel):
    mime: str = Field(
        ...,
        description="MIME type to convert the asset to (e.g., 'image/png')",
        title='Mime',
    )


class PostAssetsIdFilesKeyConvertResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    file_data: Optional[str] = Field(
        None,
        description="Base64 encoded data of the file to be uploaded (e.g., 'data:model/gltf-binary,base64;...')",
        title='File Data',
    )


class PostAssetsIdFilesKeyRenderRequest(BaseModel):
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    resolution: Optional[int] = Field(
        128, description='Resolution for the generated image', title='Resolution'
    )
    optional: Optional[Dict[str, Any]] = Field(
        None,
        description='Optional parameters for rendering (e.g., for model: angle_phi, angle_theta, animation_active, animation_duration, animation_step, fov, mode)',
        title='Optional',
    )


class PostAssetsIdFilesKeyRenderResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostAssetsIdFilesRequest(BaseModel):
    file_key: Optional[str] = Field(
        'default', description='Key of the file to be uploaded', title='File Key'
    )
    file_data: Optional[str] = Field(
        None,
        description="Base64 encoded data of the file to be uploaded (e.g., 'data:model/gltf-binary,base64;...')",
        title='File Data',
    )
    file_details: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional details about the file in key-value format',
        title='File Details',
    )
    file_process: Optional[Dict[str, Any]] = Field(
        {'mode': 'limit', 'resolution': 1024},
        description="Processing options for the file, including mode (e.g., 'limit' / 'fix') and resolution (e.g., 1024)",
        title='File Process',
    )


class PostAssetsRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    file_key: Optional[str] = Field(
        'default', description='Key of the file to be uploaded', title='File Key'
    )
    file_data: Optional[str] = Field(
        None,
        description="Base64 encoded data of the file to be uploaded (e.g., 'data:model/gltf-binary,base64;...')",
        title='File Data',
    )
    file_details: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional details about the file in key-value format',
        title='File Details',
    )
    file_process: Optional[Dict[str, Any]] = Field(
        {'mode': 'limit', 'resolution': 1024},
        description="Processing options for the file, including mode (e.g., 'limit' / 'fix') and resolution (e.g., 1024)",
        title='File Process',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )
    shared: Optional[int] = Field(
        0,
        description='Indicates whether the asset is not shared (0) or shared (privately via link: 1, publicly: 2)',
        title='Shared',
    )


class PostAssetsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesFromAssetsRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    prompt_positive: str = Field(
        ...,
        description='The positive text prompt for the generation.',
        title='Prompt Positive',
    )
    prompt_negative: Optional[str] = Field(
        None,
        description='The negative text prompt for the generation.',
        title='Prompt Negative',
    )
    assets: Optional[List[Dict[str, Any]]] = Field(
        [
            {
                'id': 'ObjectId',
                'file_key': 'default',
                'file_mode': 'canny',
                'file_process': True,
                'file_strength': 0.5,
            }
        ],
        description='List of assets to use for image generation, including id, key, mode, process, and strength.',
        title='Assets',
    )
    seeds: Optional[List[int]] = Field(
        [-1], description='List of seeds.', title='Seeds'
    )
    resolution: Optional[int] = Field(
        128, description='Resolution for the generated image', title='Resolution'
    )
    alpha: Optional[Dict[str, Any]] = Field(
        {'active': False, 'fill': {'active': False, 'margin': 10}},
        description='Alpha channel options for image generation.',
        title='Alpha',
    )
    diffusion: Optional[Dict[str, Any]] = Field(
        None,
        example={'adherence': 2, 'denoising': 1, 'model': 'generio-v1-sfw', 'steps': 6},
        title='Diffusion',
    )
    style: Optional[str] = Field(
        None,
        description="Style options for image generation (e.g., 'sketch').",
        title='Style',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesFromAssetsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesFromPromptRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    prompt_positive: str = Field(
        ...,
        description='The positive text prompt for the generation.',
        title='Prompt Positive',
    )
    prompt_negative: Optional[str] = Field(
        None,
        description='The negative text prompt for the generation.',
        title='Prompt Negative',
    )
    seeds: Optional[List[int]] = Field(
        [-1], description='List of seeds.', title='Seeds'
    )
    resolution: Optional[int] = Field(
        128, description='Resolution for the generated image', title='Resolution'
    )
    alpha: Optional[Dict[str, Any]] = Field(
        {'active': False, 'fill': {'active': False, 'margin': 10}},
        description='Alpha channel options for image generation.',
        title='Alpha',
    )
    diffusion: Optional[Dict[str, Any]] = Field(
        None,
        example={'adherence': 2, 'denoising': 1, 'model': 'generio-v1-sfw', 'steps': 6},
        title='Diffusion',
    )
    style: Optional[str] = Field(
        None,
        description="Style options for image generation (e.g., 'sketch').",
        title='Style',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesFromPromptResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyClassifyRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    category: Optional[str] = Field(None, title='Category')
    parameters: Optional[Dict[str, Any]] = Field(
        None, description='Parameters for the classification model.', title='Parameters'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class Mode(Enum):
    bg = 'bg'
    fg = 'fg'


class PostImagesIdFilesKeyGenerateAlphaAddRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    threshold: Optional[float] = Field(
        None, description='Threshold for alpha generation.', title='Threshold'
    )
    mode: Optional[Mode] = Field(
        'bg',
        description="Mode for alpha generation (i.e., 'bg' = background, 'fg' = foreground).",
        title='Mode',
    )
    fill: Optional[Dict[str, Any]] = Field(
        {'active': False, 'margin': 10},
        description='Fill options for image generation.',
        title='Fill',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateAlphaAddResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateAlphaRemoveRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    background: Optional[List[int]] = Field(
        [0, 0, 0],
        description='Background color for alpha generation.',
        title='Background',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateAlphaRemoveResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateAnnotationsRemoveRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    confidence: Optional[float] = Field(
        0.5,
        description='Confidence level for annotation removal between 0.0 and 1.0.',
        title='Confidence',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateAnnotationsRemoveResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateCannyRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    threshold: Optional[List[int]] = Field(
        [100, 200],
        description='Low and high threshold for the hysteresis procedure.',
        title='Threshold',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateCannyResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateDepthRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateDepthResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateDiffuseRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    seed: Optional[int] = Field(
        -1, description='Seed for the generation.', title='Seed'
    )
    steps: Optional[int] = Field(
        40, description='Number of steps for the generation.', title='Steps'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateDiffuseResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateIrradianceRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    seed: Optional[int] = Field(
        -1, description='Seed for the generation.', title='Seed'
    )
    steps: Optional[int] = Field(
        40, description='Number of steps for the generation.', title='Steps'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateIrradianceResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateMetallicRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    seed: Optional[int] = Field(
        -1, description='Seed for the generation.', title='Seed'
    )
    steps: Optional[int] = Field(
        40, description='Number of steps for the generation.', title='Steps'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateMetallicResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateNormalRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    seed: Optional[int] = Field(
        -1, description='Seed for the generation.', title='Seed'
    )
    steps: Optional[int] = Field(
        40, description='Number of steps for the generation.', title='Steps'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateNormalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateRoughnessRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    seed: Optional[int] = Field(
        -1, description='Seed for the generation.', title='Seed'
    )
    steps: Optional[int] = Field(
        40, description='Number of steps for the generation.', title='Steps'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateRoughnessResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateSegmentRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateSegmentResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostImagesIdFilesKeyGenerateSketchRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    target_file_key: Optional[str] = Field(
        None,
        description='Target file key for operation (if None, new asset will be created)',
        title='Target File Key',
    )
    thickness: Optional[int] = Field(
        4, description='Thickness of the sketch lines.', title='Thickness'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostImagesIdFilesKeyGenerateSketchResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class Quality(Enum):
    high = 'high'
    low = 'low'


class PostModelsFromAssetsRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    assets: Optional[List[Dict[str, Any]]] = Field(
        [{'id': 'ObjectId', 'file_key': 'default'}],
        description='List of assets to use for model generation, including id and key.',
        title='Assets',
    )
    seeds: Optional[List[int]] = Field(
        [-1], description='List of seeds.', title='Seeds'
    )
    quality: Optional[Quality] = Field(
        'high',
        description='Quality of the generated image (i.e., high or low)',
        title='Quality',
    )
    keep_ratio: Optional[float] = Field(
        0.95,
        description='Ratio of vertices to keep after generation (percentage value between 0 and 1, whereas 0 disables simplification).',
        title='Keep Ratio',
    )
    geometry_adherence: Optional[float] = Field(
        7.5,
        description='Geometry adherence during diffusion process (value >0 and <30).',
        title='Geometry Adherence',
    )
    material_adherence: Optional[float] = Field(
        3.0,
        description='Material adherence during diffusion process (value >0 and <30).',
        title='Material Adherence',
    )
    material_active: Optional[bool] = Field(
        True,
        description='Whether to generate material during diffusion process.',
        title='Material Active',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostModelsFromAssetsResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostModelsFromPromptRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    prompt_positive: str = Field(
        ...,
        description='The positive text prompt for the generation.',
        title='Prompt Positive',
    )
    seeds: Optional[List[int]] = Field(
        [-1], description='List of seeds.', title='Seeds'
    )
    quality: Optional[Quality] = Field(
        'high',
        description='Quality of the generated image (i.e., high or low)',
        title='Quality',
    )
    keep_ratio: Optional[float] = Field(
        0.95,
        description='Ratio of vertices to keep after generation (percentage value between 0 and 1, whereas 0 disables simplification).',
        title='Keep Ratio',
    )
    geometry_adherence: Optional[float] = Field(
        7.5,
        description='Geometry adherence during diffusion process (value >0 and <30).',
        title='Geometry Adherence',
    )
    material_adherence: Optional[float] = Field(
        3.0,
        description='Material adherence during diffusion process (value >0 and <30).',
        title='Material Adherence',
    )
    material_active: Optional[bool] = Field(
        True,
        description='Whether to generate material during diffusion process.',
        title='Material Active',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostModelsFromPromptResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostModelsFromScriptRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    script: Optional[str] = Field(
        None, description='The script to use for model generation.', title='Script'
    )
    libraries: Optional[List[str]] = Field(
        None,
        description='List of libraries to include in the script.',
        title='Libraries',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostModelsFromScriptResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class Format(Enum):
    gaussian = 'gaussian'
    radiance = 'radiance'


class PostModelsIdKeyDecoderRequest(BaseModel):
    format: Optional[Format] = Field(
        'gaussian', description='Format of the decoded data.', title='Format'
    )


class PostModelsIdKeyDecoderResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    file_data: Optional[str] = Field(
        None,
        description="Base64 encoded data of the file to be uploaded (e.g., 'data:model/gltf-binary,base64;...')",
        title='File Data',
    )


class PostModelsIdKeyDetailsPoseRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    translate: Optional[Dict[str, Any]] = Field(
        {'active': False, 'automatic': False, 'x': 0, 'y': 0, 'z': 0},
        description='Translate the pose of the model.',
        title='Translate',
    )
    rotate: Optional[Dict[str, Any]] = Field(
        {'active': False, 'automatic': False, 'x': 0, 'y': 0, 'z': 0},
        description='Rotate the pose of the model.',
        title='Rotate',
    )
    scale: Optional[Dict[str, Any]] = Field(
        {'active': False, 'x': 1, 'y': 1, 'z': 1},
        description='Scale the pose of the model.',
        title='Scale',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostModelsIdKeyDetailsPoseResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostModelsIdKeyGenerateGlobalRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    prompt_positive: str = Field(
        ...,
        description='The positive text prompt for the generation.',
        title='Prompt Positive',
    )
    seed: Optional[int] = Field(
        -1, description='Seed for the generation.', title='Seed'
    )
    quality: Optional[Quality] = Field(
        'high',
        description='Quality of the generated image (i.e., high or low)',
        title='Quality',
    )
    keep_ratio: Optional[float] = Field(
        0.95,
        description='Ratio of vertices to keep after generation (percentage value between 0 and 1, whereas 0 disables simplification).',
        title='Keep Ratio',
    )
    material_adherence: Optional[float] = Field(
        3.0,
        description='Material adherence during diffusion process (value >0 and <30).',
        title='Material Adherence',
    )
    texture_active: Optional[bool] = Field(
        True,
        description='Whether to generate a UV mapping and texture.',
        title='Texture Active',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostModelsIdKeyGenerateGlobalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostModelsIdKeyGenerateLocalRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    prompt_positive: str = Field(
        ...,
        description='The positive text prompt for the generation.',
        title='Prompt Positive',
    )
    seed: Optional[int] = Field(
        -1, description='Seed for the generation.', title='Seed'
    )
    quality: Optional[Quality] = Field(
        'high',
        description='Quality of the generated image (i.e., high or low)',
        title='Quality',
    )
    keep_ratio: Optional[float] = Field(
        0.95,
        description='Ratio of vertices to keep after generation (percentage value between 0 and 1, whereas 0 disables simplification).',
        title='Keep Ratio',
    )
    geometry_adherence: Optional[float] = Field(
        7.5,
        description='Geometry adherence during diffusion process (value >0 and <30).',
        title='Geometry Adherence',
    )
    material_adherence: Optional[float] = Field(
        3.0,
        description='Material adherence during diffusion process (value >0 and <30).',
        title='Material Adherence',
    )
    material_active: Optional[bool] = Field(
        True,
        description='Whether to generate material during diffusion process.',
        title='Material Active',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostModelsIdKeyGenerateLocalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostPublicContactRequest(BaseModel):
    email: Optional[str] = Field(None, title='Email')
    name: Optional[str] = Field(None, description='Name of the user.', title='Name')
    message: str = Field(..., description='Message from the user.', title='Message')


class PostPublicContactResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostStripeResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostTextsFromPromptRequest(BaseModel):
    app: Optional[str] = Field(
        None,
        description="Name of the app to which the asset belongs (e.g., 'sketch', 'sketch2', 'library')",
        title='App',
    )
    prompt_positive: str = Field(
        ...,
        description='The positive text prompt for the generation.',
        title='Prompt Positive',
    )
    template: Optional[str] = Field(
        None, description='The template to use for text generation.', title='Template'
    )
    seeds: Optional[List[int]] = Field(
        [-1], description='List of seeds.', title='Seeds'
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostTextsFromPromptResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    assets: List[Dict[str, Any]] = Field(
        ..., description='Array of assets in key-value format', title='Assets'
    )


class PostUsersAuthenticationPasswordForgotRequest(BaseModel):
    email: str = Field(..., description='Email address of the user', title='Email')


class PostUsersAuthenticationPasswordForgotResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostUsersAuthenticationRefreshResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    token: str = Field(
        ..., description='token (e.g., eyJhbGciOiJIUzI1NiIsInR5cCI6...)', title='Token'
    )
    type: str = Field(..., description='type of token (e.g., bearer)', title='Type')


class PostUsersAuthenticationRequest(BaseModel):
    email: str = Field(..., description='Email address of the user', title='Email')
    password: str = Field(..., description='Password of the user', title='Password')


class PostUsersAuthenticationResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    token: str = Field(
        ..., description='token (e.g., eyJhbGciOiJIUzI1NiIsInR5cCI6...)', title='Token'
    )
    type: str = Field(..., description='type of token (e.g., bearer)', title='Type')


class PostUsersNewsletterRequest(BaseModel):
    subscribed: bool = Field(
        ...,
        description='Indicates whether the user wants to subscribe to the newsletter',
        title='Subscribed',
    )


class PostUsersNewsletterResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostUsersRequest(BaseModel):
    email: str = Field(..., description='Email address of the user', title='Email')
    design: Optional[Dict[str, Any]] = Field(
        {'mode': 'dark', 'theme': 0},
        description='Design mode (i.e., dark or light) and theme number (i.e., 0 - 3)',
        title='Design',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PostUsersResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PostUsersSubscriptionResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    pricing_table: Optional[str] = Field(
        None, description='The id of the stripe pricing table', title='Pricing Table'
    )
    redirect_url: Optional[str] = Field(
        None,
        description='URL to redirect the user to the stripe billing portal',
        title='Redirect Url',
    )
    client_secret: Optional[str] = Field(
        None,
        description='The Stripe client secret if using pricing table session',
        title='Client Secret',
    )
    stripe_pk: Optional[str] = Field(
        None,
        description='Stripe public key for frontend integration',
        title='Stripe Pk',
    )


class PutAnalyticsVoteRequest(BaseModel):
    client: Optional[str] = Field(
        None,
        description="Name of the client used (e.g., 'homepage', 'appsuite', 'authentication')",
        title='Client',
    )
    version: str = Field(..., description='Version of the app.', title='Version')
    topic: str = Field(..., description='Topic of the feedback.', title='Topic')
    vote: bool = Field(
        ...,
        description='Vote for the combination of query parameter (i.e., app, version, topic).',
        title='Vote',
    )


class PutAnalyticsVoteResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PutAppsNameAdditionalRequest(BaseModel):
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PutAppsNameAdditionalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PutAssetsIdAdditionalRequest(BaseModel):
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PutAssetsIdAdditionalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PutAssetsIdSharedRequest(BaseModel):
    shared: Optional[int] = Field(
        0,
        description='Indicates whether the asset is not shared (0) or shared (privately via link: 1, publicly: 2)',
        title='Shared',
    )


class PutAssetsIdSharedResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PutUsersActivationActivateRequest(BaseModel):
    token: str = Field(
        ..., description='Token provided in email from POST /users', title='Token'
    )


class PutUsersActivationActivateResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    token: str = Field(
        ..., description='token (e.g., eyJhbGciOiJIUzI1NiIsInR5cCI6...)', title='Token'
    )
    type: str = Field(..., description='type of token (e.g., bearer)', title='Type')


class PutUsersActivationDeactivateResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class PutUsersAdditionalRequest(BaseModel):
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PutUsersAdditionalResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )
    additional: Optional[Dict[str, Any]] = Field(
        None, description='Any additional data in key-value format', title='Additional'
    )


class PutUsersAuthenticationPasswordChangeRequest(BaseModel):
    password: str = Field(..., description='Password of the user', title='Password')


class PutUsersAuthenticationPasswordChangeResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class Mode1(Enum):
    dark = 'dark'
    light = 'light'


class PutUsersDesignRequest(BaseModel):
    mode: Mode1 = Field(
        ..., description='Design mode (i.e., dark or light)', title='Mode'
    )
    theme: int = Field(..., description='Theme number (i.e., 0 - 3)', title='Theme')


class PutUsersDesignResponse(BaseModel):
    success: Optional[bool] = Field(
        True,
        description='Indicates whether the request was successful',
        title='Success',
    )
    message: Optional[str] = Field(
        'Request completed successfully',
        description='Message with a detailed response.',
        title='Message',
    )


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
